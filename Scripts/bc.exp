# sample expect test script based on 
# "Essential Open Source Toolset", Zeller & Krinike, page 210

# if the program operated in a loop, we'd spawn it
# once here, would interact with it for the rest
# of the script

# the pass and fail procedures output the test outcome:
# set PASS "test is successful"
# set FAIL "test has failed"

proc pass {a} { puts "PASS $a" }
proc fail {a} { puts "FAIL $a" }

# bc_test expr result sends expr to BC
proc bc_test {expr result} {
 # factorial-recur prompts
 # us once for the argument, and exits
 # on completion so we need to spawn
 # once per test (otherwise we'd spawn
 # it at the start of the script)
 spawn factorial-recur
 sleep 0.5
 # puts "entering send"
 # -- escapes issues with negative numbers treated as args
 send -- "$expr\n"
 # puts "send is succ"

 # this line is a bug in book?
 # expect "$expr\r\n"

 # get a race if we dont sleep
 sleep 0.1

 # the option '-gl' makes sure that a 
 # pattern beginning with '-' is not interpreted
 # as an option to expect

 expect {
    # -gl "$result\r\n" { pass "$expr" }
    -re "$result" { pass "$expr" }
    # TODO: need to figure out how to get
    # latest contents returned to expect, see http://wiki.tcl.tk/17378
    "*\r\n"           { fail "input: $expr; expected $result; got $expect_out(buffer)" }
    timeout { fail "(timeout) $expr" }
  }

  # TODO: struggling to figure out how to get next msg...
  # expect $prompt
  # puts "FINAL RECEIVE MSG: $expect_out(buffer)"

}

# individual test cases

bc_test "4"   "24"
# should fail:
bc_test "4"   "25"
bc_test "4"   "The factorial of 4 is 24"
bc_test "0"   "The factorial of 0 is 1"
# should fail:
bc_test "0"   "The factorial of 0 is 10"
bc_test "-1"  "You entered a negative number: -1"
bc_test "-1"  ".*negative.*"
bc_test "0"   "The factorial of 0 is 1"
